{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Status","Text","text","x","y","w","h","className","style","left","top","width","height","Rect","App","useState","src","setSrc","ready","status","setStatus","rects","setRects","onDrop","acceptedFiles","a","forEach","file","console","log","type","includes","uploading","reader","FileReader","onload","base64Str","result","readAsDataURL","data","FormData","append","axios","post","res","arr","length","res_ok","res_empty","getRootProps","getInputProps","map","rect","index","key","position","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe9d004c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport Dropzone from 'react-dropzone'\nimport ReactLoading from 'react-loading'\nimport axios, { AxiosRequestConfig, AxiosInstance } from 'axios'\nimport './App.css'\ninterface IRect {\n  text: string,\n  confidence: number,\n  position: {\n    x: number,\n    y: number,\n    w: number,\n    h: number\n  }\n}\nenum Status{\n  ready,\n  uploading,\n  res_empty,\n  res_ok,\n  res_err,\n  img_err\n}\nconst Text = ({ text, x, y, w, h }: { text: string, x: number, y: number, w: number, h: number }) => {\n  return (\n    <div className=\"rect-text\"\n      style={{\n        left: x + \"px\",\n        top: y - 20 + \"px\",\n        width: w + \"px\",\n        height: \"20px\"\n      }}\n    >{text}</div>\n  )\n}\nconst Rect = ({ text, x, y, w, h }: { text: string, x: number, y: number, w: number, h: number }) => {\n  return (\n    <div className=\"rect\" style={{\n      left: x + \"px\",\n      top: y + \"px\",\n      width: w + \"px\",\n      height: h + \"px\"\n    }}>\n    </div>\n  )\n}\nfunction App() {\n  const [src, setSrc] = useState<string>(\"\")\n  const [status, setStatus] = useState<Status>(Status.ready)\n  const [rects, setRects] = useState<IRect[]>([])\n  const onDrop = async (acceptedFiles: File[]) => {\n    acceptedFiles.forEach(async (file: File) => {\n      console.log(file)\n      // reader.readAsArrayBuffer(file)\n      if (file.type.includes(\"image\")) {\n        setStatus(Status.uploading)\n        const reader = new FileReader()\n        reader.onload = async () => {\n          const base64Str: string = reader.result + \"\"\n          setSrc(base64Str)\n        }\n        reader.readAsDataURL(file)\n        const data = new FormData()\n        data.append('file', file)\n        console.log(data)\n        const res = await axios.post('/api/upload', data);\n        const arr:IRect[] = res.data\n        console.log(arr)\n        if(arr.length==0){\n          setStatus(Status.res_ok)\n        }else{\n          setStatus(Status.res_empty)\n        }\n        setRects(arr)\n      }\n    });\n\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Dropzone onDrop={onDrop}>\n          {({ getRootProps, getInputProps }) => (\n            <div {...getRootProps()}>\n              <div className=\"img-pan\">\n                <img src={src} />\n                {\n                  rects.map((rect:IRect,index:number) => {\n                    return (\n                      <div key={index}>\n                        <Rect x={rect.position.x} y={rect.position.y} w={rect.position.w} h={rect.position.h} text={rect.text} />\n                        <Text x={rect.position.x} y={rect.position.y} w={rect.position.w} h={rect.position.h} text={rect.text} />\n                      </div>\n                    )\n                  })\n                }\n              </div>\n              {\n                src == \"\" && <p>要死劲儿的把图片拖拽到这里</p>\n              }\n            </div>\n          )}\n        </Dropzone>\n        {\n          status==Status.uploading && <ReactLoading type={\"bars\"} color={\"#fff\"} />\n        }\n      </header>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}